import React, { useEffect, useState } from 'react';
import { Container, Row, Col, Card, Button, Form, Modal } from 'react-bootstrap';
import axios from 'axios';

function AdminCategories() {
  const [categories, setCategories] = useState([]);
  const [showModal, setShowModal] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [name, setName] = useState('');

  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const response = await axios.get('http://localhost:3000/api/category/categories');
        setCategories(response.data);
      } catch (error) {
        console.error('Ошибка при получении категорий:', error);
      }
    };

    fetchCategories();
  }, []);

  const handleShowModal = (category) => {
    setSelectedCategory(category);
    setName(category ? category.name : '');
    setShowModal(true);
  };

  const handleCloseModal = () => {
    setSelectedCategory(null);
    setName('');
    setShowModal(false);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (selectedCategory) {
        await axios.put(`http://localhost:3000/api/category/categories/${selectedCategory.id}`, { name });
        setCategories(categories.map(category => category.id === selectedCategory.id ? { ...category, name } : category));
      } else {
        const response = await axios.post('http://localhost:3000/api/category/categories/', { name });
        setCategories([...categories, response.data]);
      }
      handleCloseModal();
    } catch (error) {
      console.error('Ошибка при сохранении категории:', error);
    }
  };

  const handleDelete = async (categoryId) => {
    try {
      await axios.delete(`http://localhost:3000/api/category/categories/${categoryId}`);
      setCategories(categories.filter(category => category.id !== categoryId));
    } catch (error) {
      console.error('Ошибка при удалении категории:', error);
    }
  };

  return (
    <Container className="min-vh-100 py-4 mt-4" style={{borderRadius:'10px', backgroundColor: '#272727', color: '#272727'}}>
      <h2 className='text-center text-white'>Управление категориями</h2>
      <Button variant="primary" onClick={() => handleShowModal(null)}>Добавить категорию</Button>
      <Row>
        {categories.map((category) => (
          <Col md={4} key={category.id}>
            <Card className="mt-3">
              <Card.Body>
                <Card.Title>{category.name}</Card.Title>
                <Button className="me-2" variant="warning" onClick={() => handleShowModal(category)}>Редактировать</Button>
                <Button variant="danger" onClick={() => handleDelete(category.id)}>Удалить</Button>
              </Card.Body>
            </Card>
          </Col>
        ))}
      </Row>
      <Modal show={showModal} onHide={handleCloseModal}>
        <Modal.Header closeButton>
          <Modal.Title>{selectedCategory ? 'Редактировать категорию' : 'Добавить категорию'}</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form onSubmit={handleSubmit}>
            <Form.Group controlId="name">
              <Form.Label>Название</Form.Label>
              <Form.Control type="text" value={name} onChange={(e) => setName(e.target.value)} required />
            </Form.Group>
            <Button className="mt-2"variant="primary" type="submit">
              Сохранить
            </Button>
          </Form>
        </Modal.Body>
      </Modal>
    </Container>
  );
}

export default AdminCategories;
