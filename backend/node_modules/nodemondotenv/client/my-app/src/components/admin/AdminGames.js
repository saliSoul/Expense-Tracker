import React, { useEffect, useState } from 'react';
import { Container, Table, Button, Form, Modal } from 'react-bootstrap';
import axios from 'axios';

function AdminGames() {
  const [products, setProducts] = useState([]);
  const [categories, setCategories] = useState([]);
  const [showModal, setShowModal] = useState(false);
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  const [price, setPrice] = useState('');
  const [categoryId, setCategoryId] = useState('');
  const [year, setYear] = useState('');
  const [inStock, setInStock] = useState('');
  const [img, setImg] = useState(null);
  const [systemRequirements, setSystemRequirements] = useState(''); // Новое состояние

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const response = await axios.get('http://localhost:3000/api/game/games/');
        setProducts(response.data);
      } catch (error) {
        console.error('Ошибка при получении товаров:', error);
      }
    };

    fetchProducts();
  }, []);

  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const response = await axios.get('http://localhost:3000/api/category/categories');
        setCategories(response.data);
      } catch (error) {
        console.error('Ошибка при получении категорий:', error);
      }
    };

    fetchCategories();
  }, []);

  const handleShowModal = (product) => {
    setSelectedProduct(product);
    setName(product ? product.name : '');
    setDescription(product ? product.description : '');
    setPrice(product ? product.price : '');
    setCategoryId(product ? product.categoryId : '');
    setYear(product ? product.year : '');
    setInStock(product ? product.inStock : '');
    setSystemRequirements(product ? product.systemRequirements : ''); // Устанавливаем системные требования
    setShowModal(true);
  };

  const handleCloseModal = () => {
    setSelectedProduct(null);
    setName('');
    setDescription('');
    setPrice('');
    setCategoryId('');
    setYear('');
    setInStock('');
    setImg(null);
    setSystemRequirements(''); // Сбрасываем системные требования
    setShowModal(false);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const formData = new FormData();
    formData.append('name', name);
    formData.append('description', description);
    formData.append('price', price);
    formData.append('categoryId', categoryId);
    formData.append('year', year);
    formData.append('inStock', inStock);
    formData.append('img', img);
    formData.append('systemRequirements', systemRequirements); // Добавляем системные требования

    try {
      if (selectedProduct) {
        await axios.put(`http://localhost:3000/api/game/games/${selectedProduct.id}`, formData);
        setProducts(products.map(product => product.id === selectedProduct.id ? { ...product, name, description, price, categoryId, year, inStock, systemRequirements } : product));
      } else {
        const response = await axios.post('http://localhost:3000/api/game/games/', formData);
        setProducts([...products, response.data]);
      }
      handleCloseModal();
    } catch (error) {
      console.error('Ошибка при сохранении товара:', error);
    }
  };

  const handleDelete = async (productId) => {
    try {
      await axios.delete(`http://localhost:3000/api/game/games/${productId}`);
      setProducts(products.filter(product => product.id !== productId));
    } catch (error) {
      console.error('Ошибка при удалении товара:', error);
    }
  };

  // Сортировка продуктов по дате добавления
  const sortedProducts = products.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

  return (
    <Container className="min-vh-100 py-4 mt-4" style={{borderRadius:'10px', backgroundColor: '#272727', color: '#272727'}}>
      <h2 className='text-center mt-4' style={{color: '#FFF'}}>Управление играми</h2>
      <Button className='mb-2' variant="primary" onClick={() => handleShowModal(null)}>Добавить игру</Button>
      <Table striped bordered hover>
        <thead>
          <tr>
            <th>Изображение</th>
            <th>Название</th>
            <th>Описание</th>
            <th>Цена</th>
            <th>Категория</th>
            <th>Год</th>
            <th>В наличии</th>
            <th>Системные требования</th>
            <th>Действия</th>
          </tr>
        </thead>
        <tbody>
          {sortedProducts.map((product) => (
            <tr key={product.id}>
              <td><img src={`http://localhost:3000/uploads/${product.img}`} alt={product.name} style={{ width: '50px' }} /></td>
              <td>{product.name}</td>
              <td>{product.description}</td>
              <td>{product.price}р.</td>
              <td>{product.category ? product.category.name : 'Нет категории'}</td>
              <td>{product.year}</td>
              <td>{product.inStock}</td>
              <td>{product.systemRequirements}</td>
              <td>
                <Button className="mb-2 me-1" variant="warning" onClick={() => handleShowModal(product)}>Редактировать</Button>
                <Button variant="danger" onClick={() => handleDelete(product.id)}>Удалить</Button>
              </td>
            </tr>
          ))}
        </tbody>
      </Table>
      <Modal show={showModal} onHide={handleCloseModal}>
        <Modal.Header closeButton>
          <Modal.Title>{selectedProduct ? 'Редактировать товар' : 'Добавить товар'}</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form onSubmit={handleSubmit}>
            <Form.Group controlId="name">
              <Form.Label>Название</Form.Label>
              <Form.Control type="text" value={name} onChange={(e) => setName(e.target.value)} required />
            </Form.Group>
            <Form.Group controlId="description">
              <Form.Label>Описание</Form.Label>
              <Form.Control as="textarea" rows={3} value={description} onChange={(e) => setDescription(e.target.value)} required />
            </Form.Group>
            <Form.Group controlId="price">
              <Form.Label>Цена</Form.Label>
              <Form.Control type="number" value={price} onChange={(e) => setPrice(e.target.value)} required />
            </Form.Group>
            <Form.Group controlId="categoryId">
              <Form.Label>Категория</Form.Label>
              <Form.Control as="select" value={categoryId} onChange={(e) => setCategoryId(e.target.value)} required>
                <option value="">Выберите категорию</option>
                {categories.map((category) => (
                  <option key={category.id} value={category.id}>
                    {category.name}
                  </option>
                ))}
              </Form.Control>
            </Form.Group>
            <Form.Group controlId="year">
              <Form.Label>Год</Form.Label>
              <Form.Control type="number" value={year} onChange={(e) => setYear(e.target.value)} required />
            </Form.Group>
            <Form.Group controlId="inStock">
              <Form.Label>В наличии</Form.Label>
              <Form.Control type="number" value={inStock} onChange={(e) => setInStock(e.target.value)} required />
            </Form.Group>
            <Form.Group controlId="systemRequirements">
              <Form.Label>Системные требования (Через запятую)</Form.Label>
              <Form.Control as="textarea" rows={3} value={systemRequirements} onChange={(e) => setSystemRequirements(e.target.value)} required />
            </Form.Group>
            <Form.Group controlId="img">
              <Form.Label>Изображение</Form.Label>
              <Form.Control type="file" onChange={(e) => setImg(e.target.files[0])} />
            </Form.Group>
            <Button variant="primary" type="submit">
              Сохранить
            </Button>
          </Form>
        </Modal.Body>
      </Modal>
    </Container>
  );
}

export default AdminGames;
