const { Games, Categories } = require('../models/models');
const upload = require('../multerConfig');

class GameController {
    async create(req, res) {
        try {
            const { name, description, price, categoryId, year, inStock, systemRequirements } = req.body;
            const img = req.file ? req.file.filename : null; // Получаем имя файла из req.file

            if (!name || !description || !price || !categoryId || !year || !inStock) {
                return res.status(400).json({ message: 'Все поля обязательны' });
            }

            // Получаем категорию из базы данных по ID
            const categoryRecord = await Categories.findByPk(categoryId);
            if (!categoryRecord) {
                return res.status(404).json({ message: 'Категория не найдена' });
            }

            const game = await Games.create({
                name,
                img,
                description,
                price,
                categoryId, // Используем ID категории
                year,
                inStock,
                systemRequirements // Новое поле
            });

            return res.json(game);
        } catch (e) {
            console.log(e);
            return res.status(500).json({ message: 'Ошибка при создании игры', e });
        }
    }

    async getAll(req, res) {
        try {
            const { sortBy, categoryId } = req.query;
            const where = {};
            if (categoryId) {
                where.categoryId = categoryId;
            }

            const order = [];
            if (sortBy) {
                order.push([sortBy, 'ASC']);
            } else {
                order.push(['createdAt', 'DESC']);
            }

            const games = await Games.findAll({ where, order, include: [{ model: Categories, attributes: ['name'] }] });
            return res.json(games);
        } catch (error) {
            return res.status(500).json({ message: 'Ошибка при получении игр', error });
        }
    }

    async getOne(req, res) {
        try {
            const { id } = req.params;
            const game = await Games.findOne({ where: { id }, include: [{ model: Categories, attributes: ['name'] }] });
            if (!game) {
                return res.status(404).json({ message: 'Игра не найдена' });
            }
            return res.json(game);
        } catch (error) {
            return res.status(500).json({ message: 'Ошибка при получении игры', error });
        }
    }

    async update(req, res) {
        try {
            const { id } = req.params;
            const { name, description, price, categoryId, year, inStock, systemRequirements } = req.body;
            const img = req.file ? req.file.filename : null; // Получаем имя файла из req.file

            const game = await Games.findOne({ where: { id } });
            if (!game) {
                return res.status(404).json({ message: 'Товар не найден' });
            }

            game.name = name;
            game.description = description;
            game.price = price;
            game.categoryId = categoryId;
            game.year = year;
            game.inStock = inStock;
            game.systemRequirements = systemRequirements; // Новое поле
            if (img) {
                game.img = img;
            }

            await game.save();
            return res.json(game);
        } catch (error) {
            return res.status(500).json({ message: 'Ошибка при обновлении товара', error });
        }
    }

    async delete(req, res) {
        try {
            const { id } = req.params;
            const game = await Games.findOne({ where: { id } });
            if (!game) {
                return res.status(404).json({ message: 'Товар не найден' });
            }
            await game.destroy();
            return res.json({ message: 'Товар успешно удален' });
        } catch (error) {
            return res.status(500).json({ message: 'Ошибка при удалении товара', error });
        }
    }
}

module.exports = new GameController();
