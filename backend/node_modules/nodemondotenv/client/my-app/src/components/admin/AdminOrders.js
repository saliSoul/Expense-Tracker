import React, { useEffect, useState } from 'react';
import { Container, Row, Col, Card, Button, Form } from 'react-bootstrap';
import axios from 'axios';

function AdminOrders() {
  const [orders, setOrders] = useState([]);
  const [filter, setFilter] = useState('Новый');
  const [reason, setReason] = useState('');
  const [currentOrderId, setCurrentOrderId] = useState(null);

  useEffect(() => {
    fetchOrders();
  }, [filter]);

  const fetchOrders = async () => {
    try {
      const response = await axios.get('http://localhost:3000/api/order/orders', {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`
        }
      });
      console.log('Заказы:', response.data); // Добавьте этот лог
      setOrders(response.data);
    } catch (error) {
      console.error('Ошибка при получении заказов:', error);
    }
  };

  const filterStatusMap = {
    'Новый': 'Новый',
    'Подтвержденный': 'Подтвержденный',
    'Отмененный': 'Отмененный'
  };

  const filteredOrders = orders.filter(order => order.status === filterStatusMap[filter]);
  console.log('Отфильтрованные заказы:', filteredOrders); // Добавьте этот лог

  const handleStatusChange = async (orderId, status) => {
    try {
      const order = orders.find(order => order.id === orderId);
      const newReason = status === 'Отмененный' ? reason : null;

      await axios.put(`http://localhost:3000/api/order/orders/${orderId}`, {
        status,
        reason: newReason
      }, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`
        }
      });

      setReason(''); // Сбросить причину отказа после отправки
      setCurrentOrderId(null); // Сбросить текущий заказ после отправки
      fetchOrders();
    } catch (error) {
      console.error('Ошибка при обновлении статуса заказа:', error);
    }
  };

  const handleDeleteOrder = async (orderId) => {
    try {
      await axios.delete(`http://localhost:3000/api/order/orders/${orderId}`, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`
        }
      });
      fetchOrders();
    } catch (error) {
      console.error('Ошибка при удалении заказа:', error);
    }
  };

  return (
    <Container className="min-vh-100 py-4 mt-4" style={{borderRadius:'10px', backgroundColor: '#272727', color: '#272727'}}>
      <Row>
        <Col>
          <h2 className="text-center mb-4" style={{color: '#fff'}}>Заказы</h2>
          <Form.Group controlId="formFilter">
            <Form.Label style={{color: '#fff'}}>Фильтр</Form.Label>
            <Form.Control as="select" value={filter} onChange={(e) => setFilter(e.target.value)}>
              <option value="Новый">Новый</option>
              <option value="Подтвержденный">Подтвержденный</option>
              <option value="Отмененный">Отмененный</option>
            </Form.Control>
          </Form.Group>
          {filteredOrders.length > 0 ? (
            filteredOrders.map((order) => (
              <Card key={order.id} className="mb-3 mt-3" style={{backgroundColor:'#2C2C2C', color: '#fff', borderColor:'#747474'}}>
                <Card.Body>
                  <Card.Title style={{color: '#fff'}}>Заказ #{order.id}</Card.Title>
                  <Card.Text style={{color: '#fff'}}>Дата: {new Date(order.createdAt).toLocaleString()}</Card.Text>
                  <Card.Text style={{color: '#fff'}}>ФИО: {order.user.name} {order.user.surname} {order.user.patronymic}</Card.Text>
                  <Card.Text style={{color: '#fff'}}>Количество товаров: {order.items.length}</Card.Text>
                  <Card.Text style={{color: '#fff'}}>Статус: {order.status}</Card.Text>
                  {order.status === 'Отмененный' && <Card.Text style={{color: '#fff'}}>Причина: {order.reason}</Card.Text>}
                  <Button variant="success" className="me-2" onClick={() => handleStatusChange(order.id, 'Подтвержденный')}>Подтвердить</Button>
                  <Button variant="danger" className="me-2" onClick={() => {
                    setCurrentOrderId(order.id);
                    setReason(''); // Сбросить причину отказа перед вводом новой
                  }}>Отменить</Button>
                  {currentOrderId === order.id && (
                    <Form.Group controlId="formReason">
                      <Form.Label style={{color: '#fff'}}>Причина отказа</Form.Label>
                      <Form.Control
                        type="text"
                        placeholder="Укажите причину отказа"
                        value={reason}
                        onChange={(e) => setReason(e.target.value)}
                      />
                      <Button variant="danger" className="mt-2 mb-2" onClick={() => handleStatusChange(order.id, 'Отмененный')}>Подтвердить отмену</Button>
                    </Form.Group>
                  )}
                  <Button className='me-2' variant="danger" onClick={() => handleDeleteOrder(order.id)}>Удалить</Button>
                </Card.Body>
              </Card>
            ))
          ) : (
            <p className="text-center" style={{color: '#fff'}}>Нет заказов для отображения</p>
          )}
        </Col>
      </Row>
    </Container>
  );
}

export default AdminOrders;
